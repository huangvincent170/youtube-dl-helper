from __future__ import unicode_literals
# import requests
import shutil
import youtube_dl
import sys
import re
import os
import shutil
import eyed3
from eyed3.id3.frames import ImageFrame
# from PIL import Image
# import cv2

VIDEO_ID_REGEX = re.compile(r"https:\/\/www\.youtube\.com\/watch\?v=([A-Za-z0-9\-_]+).*")
AUTO_GEN_DESC_REGEX = re.compile(r"^Provided to YouTube by .+\n{2}(.*)\n{2}[\s\S]+Auto-generated by YouTube.$")
DIR_PATH = f"{sys.argv[0][:sys.argv[0].rfind('/')]}/Downloads"
TEMP_PATH = f"{DIR_PATH}/temp"
AUDIO_FORMAT = "mp3"
VIDEO_FORMAT = "webm"
FRAME_FORMAT = "png"

class DlLogger(object):
    def debug(self, msg):
        pass
    def warning(self, msg):
        pass
    def error(self, msg):
        print(msg)

start_dl = True
dl_format = ""
def dl_hook(d):
    global start_dl, dl_format
    if d['status'] == 'downloading':
        if not start_dl:
            sys.stdout.write("\033[F")
        else:
            print(f"Begin {dl_format} Download...")
        start_dl = False
        print(d['filename'], d['_percent_str'], d['_eta_str'])
    if d['status'] == 'finished':
        print(f"Processing {dl_format}...")
        start_dl = True

AUDIO_YTDL_OPTS = {
    'format': 'bestaudio/best',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': AUDIO_FORMAT,
        'preferredquality': '192',
    }],
    'outtmpl': f'{TEMP_PATH}/%(id)s.%(ext)s',
    'logger': DlLogger(),
    'progress_hooks': [dl_hook],
}

VIDEO_YTDL_OPTS = {
    'format': 'bestvideo/best',
    # 'postprocessors': [{
    #     'key': 'FFmpegVideoConvertor',
    #     'preferedformat': VIDEO_FORMAT,
    # }],
    'outtmpl': f'{TEMP_PATH}/%(id)s.%(ext)s',
    'logger': DlLogger(),
    'progress_hooks': [dl_hook],
}

class VideoDl():
    def __init__(self, video_url):
        self.video_url = video_url
        self.video_id = VIDEO_ID_REGEX.match(video_url).groups()[0]
        self.audio_path = f'{TEMP_PATH}/{self.video_id}.{AUDIO_FORMAT}'
        # self.video_path = f'{TEMP_PATH}/{self.video_id}.{VIDEO_FORMAT}'
        self.video_path = None
        self.image_path = f'{TEMP_PATH}/{self.video_id}.{FRAME_FORMAT}'




if len(sys.argv) <= 1:
    print("Please input a youtube URL.")
    quit()

if os.path.exists(TEMP_PATH):
    shutil.rmtree(TEMP_PATH)
os.mkdir(TEMP_PATH)

video_dls = [VideoDl(video_url) for video_url in sys.argv[1:]]

for video_dl in video_dls:
    print(video_dl.video_url)
    dl_format = "Audio"
    with youtube_dl.YoutubeDL(AUDIO_YTDL_OPTS) as ydl:
        ydl.download([video_dl.video_url])
    dl_format = "Video"
    with youtube_dl.YoutubeDL(VIDEO_YTDL_OPTS) as ydl:
        ydl.download([video_dl.video_url])

    dl_meta = ydl.extract_info(video_dl.video_url, download=False)

    video_dl.video_path = f"{TEMP_PATH}/{video_dl.video_id}.{dl_meta['ext']}"
    print(video_dl.video_path)

    audiofile = eyed3.load(video_dl.audio_path)
    if not audiofile.tag:
        audiofile.initTag()

    # success, image = cv2.VideoCapture(video_dl.video_path).read()
    # cv2.imwrite(video_dl.image_path, image)

    os.system(f'ffmpeg -ss 0 -i {video_dl.video_path} -frames:v 1 {video_dl.image_path} -hide_banner -loglevel error')

    audiofile.tag.images.set(ImageFrame.FRONT_COVER, open(video_dl.image_path,'rb').read(), f'image/{FRAME_FORMAT}')
        
    audiofile.tag.title = dl_meta['title']
    auto_gen_desc_groups = AUTO_GEN_DESC_REGEX.match(dl_meta['description']).groups()[0]
    auto_gen_desc_artists = [s.strip() for s in auto_gen_desc_groups.split("Â·")]
    # print(auto_gen_desc_artists)
    assert auto_gen_desc_artists[0] == dl_meta['title']
    audiofile.tag.artist = auto_gen_desc_artists[1]
    audiofile.tag.album = dl_meta['album']
    audiofile.tag.save(version=eyed3.id3.ID3_V2_3)

    shutil.copyfile(video_dl.audio_path, f"{DIR_PATH}/{auto_gen_desc_artists[1]}_{dl_meta['title']}.{AUDIO_FORMAT}")

# reg = re.compile(r"https:\/\/www\.youtube\.com\/watch\?v=([A-Za-z0-9]+).*")

# for vid_url in vid_urls:
#     print("downloading image")
#     video_id = reg.match(vid_url).groups()[0]
#     image_url = f"https://img.youtube.com/vi/{video_id}/maxresdefault.jpg"
#     filename = image_url.split("/")[-1]
#     meta = ydl.extract_info(vid_url, download=False)
#     r = requests.get(image_url, stream = True)

#     if r.status_code == 200:
#         r.raw.decode_content = True
        
#         # Open a local file with wb ( write binary ) permission.
#         with open(filename,'wb') as f:
#             shutil.copyfileobj(r.raw, f)
            
#         print('Image sucessfully Downloaded: ',filename)
#     else:
#         print('Image Couldn\'t be retreived')

#     with Image.open(filename) as img:
#         left = (img.width - img.height) // 2
#         right = left + img.height
#         img = img.crop((left, 0, right, img.height))
#         img.save(filename)

    # id = meta['id']
    # audiofile = eyed3.load(f'{DIR_PATH}/temp-{vid_id}.mp3')
    # if (audiofile.tag == None):
    #     audiofile.initTag()

    # audiofile.tag.images.set(ImageFrame.FRONT_COVER, open(filename,'rb').read(), 'image/png')
    # audiofile.tag.save(version=eyed3.id3.ID3_V2_3)

# TODO
# add checking for if it is an autogenerated video
# if not, then use hq cropped thumbnail
# put in error checking
# make it work for a playlist
# make it work for multiple videos
# only download audio/video once and then split