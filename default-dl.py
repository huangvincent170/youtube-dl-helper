from __future__ import unicode_literals
import requests
import shutil
import youtube_dl
import sys
import re
import os
import shutil
import eyed3
from eyed3.id3.frames import ImageFrame
from PIL import Image
import cv2

if len(sys.argv) <= 1:
    print("Please input a youtube URL.")
    quit()

vid_urls = sys.argv[1:]

reg = re.compile(r"https:\/\/www\.youtube\.com\/watch\?v=([A-Za-z0-9\-]+).*")
vid_ids = [reg.match(vid_url).groups()[0] for vid_url in vid_urls]

dirpath = "./Downloads"
if os.path.exists(dirpath):
    shutil.rmtree(dirpath)
os.mkdir(dirpath)

class MyLogger(object):
    def debug(self, msg):
        pass

    def warning(self, msg):
        pass

    def error(self, msg):
        print(msg)

start_dl = True
dl_format = ""
def my_hook(d):
    global start_dl, dl_format
    if d['status'] == 'downloading':
        if not start_dl:
            sys.stdout.write("\033[F")
        else:
            print(f"Begin {dl_format} Download...")
        start_dl = False
        print(d['filename'], d['_percent_str'], d['_eta_str'])
    if d['status'] == 'finished':
        print(f"Processing {dl_format}...")
        start_dl = True

dl_format = "Audio"
ydl_opts = {
    'format': 'bestaudio/best',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
    'outtmpl': './Downloads/temp-%(id)s.%(ext)s',
    'logger': MyLogger(),
    'progress_hooks': [my_hook],
}
with youtube_dl.YoutubeDL(ydl_opts) as ydl:
    ydl.download(vid_urls)

dl_format = "Video"
ydl_opts = {
    'format': 'bestvideo/best',
    'outtmpl': './Downloads/temp-%(id)s.%(ext)s',
    'logger': MyLogger(),
    'progress_hooks': [my_hook],
}
with youtube_dl.YoutubeDL(ydl_opts) as ydl:
    ydl.download(vid_urls)

for vid_id in vid_ids:
    # print("getting first frame")
    vidcap = cv2.VideoCapture(f'{dirpath}/temp-{vid_id}.webm')
    success,image = vidcap.read()
    cv2.imwrite("frame.png", image)   
    success,image = vidcap.read()
    filename = "frame.png"
    audiofile = eyed3.load(f'{dirpath}/temp-{vid_id}.mp3')
    if (audiofile.tag == None):
        audiofile.initTag()
    audiofile.tag.images.set(ImageFrame.FRONT_COVER, open(filename,'rb').read(), 'image/png')
    audiofile.tag.save(version=eyed3.id3.ID3_V2_3)

# reg = re.compile(r"https:\/\/www\.youtube\.com\/watch\?v=([A-Za-z0-9]+).*")

# for vid_url in vid_urls:
#     print("downloading image")
#     video_id = reg.match(vid_url).groups()[0]
#     image_url = f"https://img.youtube.com/vi/{video_id}/maxresdefault.jpg"
#     filename = image_url.split("/")[-1]
#     meta = ydl.extract_info(vid_url, download=False)
#     r = requests.get(image_url, stream = True)

#     if r.status_code == 200:
#         r.raw.decode_content = True
        
#         # Open a local file with wb ( write binary ) permission.
#         with open(filename,'wb') as f:
#             shutil.copyfileobj(r.raw, f)
            
#         print('Image sucessfully Downloaded: ',filename)
#     else:
#         print('Image Couldn\'t be retreived')

#     with Image.open(filename) as img:
#         left = (img.width - img.height) // 2
#         right = left + img.height
#         img = img.crop((left, 0, right, img.height))
#         img.save(filename)

    # id = meta['id']
    # audiofile = eyed3.load(f'{dirpath}/temp-{vid_id}.mp3')
    # if (audiofile.tag == None):
    #     audiofile.initTag()

    # audiofile.tag.images.set(ImageFrame.FRONT_COVER, open(filename,'rb').read(), 'image/png')
    # audiofile.tag.save(version=eyed3.id3.ID3_V2_3)

# TODO
# crop thumbnail
# make it work for png thumbnails
# put in error checking
# make it work for a playlist
# make it work for multiple videos
# add checking for if it is an autogenerated video
# add more metadata to song file